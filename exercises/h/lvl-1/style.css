.container {
  /* TODO 1: turn this element into a flexbox with "display: flex;"

  Notice how each item has the size of its content, it stays as small as possible by default
  */
}

.item1 {
  /* TODO 2: You're going to learn more about the flex property you've seen before.

  You have seen before that "flex: 1;" in a flexbox child made it fill as much space as it could.

  flex is a shorthand property, a property that allows to set multiple properties at the same time.

  These propeties are: flex-grow, flex-shrink, and flex-basis.

  Flex-basis controls the size of a flex child along the main axis. It takes units of length like 200px. It can also take a % to represent a % of the size of the flexbox. For example, a value of 50% means the element should fill half of the size of the flexbox.

  Use "flex-basis: 500px;" here and resize the window, and see what happens.

  The item can become smaller than 500px if there isn't enough space, but will not grow beyond 500px
  */

  /* TODO 4: Let item 1 grow. Set "flex-grow: 1;" and resize the window

  Now item 1 can grow beyond 500px.
  */

  /* TODO 6: Set here "flex-shrink: 1;" */

  /* TODO 8: Let's go back to the flex property. I've mentioned it is a shorthand.

  Flex allows us to set the values of flex-grow, flex-shrink and flex-basis, all at once. So, this:

  flex-grow: 2;
  flex-shrink: 4;
  flex-basis: 200px;

  Is the same as this:

  flex: 2 4 200px;

  The default value is:

  flex: 0 1 auto;

  Which would mean that the child doesn't grow beyond its size (flex-grow: 0), it shrinks at a ratio of 1 (flex-shink: 1), and its size is as large as its content (flex-basis: auto).

  I hear you.

  We've used "flex: 1;" before, and you're wondering about that, if we just saw that flex takes 3 values.

  If flex takes one value without any units, then by default it understands we mean flex-grow.

  So, this:

  flex: 1;

  Is the same as this:

  flex-grow: 1;

  Don't worry too much about it, you can always google it when you need it

  Replace here flex-basis, flex-grow, flex-shrink and flex-basis by the shorthand "flex: 1 1 500px;"
  */
}

.item2 {
  /* TODO 3: Use also "flex-basis: 500px;" here.

  See how the same happens with the item 2 when you resize the window
  */

  /* TODO 5: Use here "flex-grow: 10;" and resize the window.

  Observe what happens:

  - Item 2 grows LARGER than item 1 when we make the window wider
  - Item 1 also grows, but at a much slower rate
  - Item 2 grows larger 10 times faster than item 1

  That's what flex-grow means: sets the growth rate of the flex child along the main axis, and it takes a numeric value.

  Make the screen narrower, nothing special happens. That's because flex-grow only acts when the children can grow larger than the size set by flex-basis.
  */

  /* TODO 7: And here "flex-shrink: 10;"

  Now, make the window narrower, what do you see?

  - When the items become smaller than 500px (the flex-basis size), item 2 shrinks faster than item 1.

  Flex-shrink is the opposite of flex-grow. It indicates the rate at which a flex child shrinks, when below its flex-basis size.

  In this case we're making item 2 shrink 10 times faster than item 1, when they shrink below the size set by flex-basis.
  */

  /* TODO 9: Replace also here all the properties by the shorthand "flex: 10 10 500px;"

  Check that things are indeed the same as before.

  Remember that the flex property works along the main axis, not the cross axis

  Then you can read a bit more about the flex property: https://developer.mozilla.org/en-US/docs/Web/CSS/flex
  */
}
